{"version":3,"sources":["constants/environment.ts","utils/altconfig.ts","components/atoms/Header/index.tsx","components/atoms/Message/index.tsx","components/moleculs/NotifyHolder/index.tsx","components/atoms/Icons/index.tsx","assets/fail.svg","assets/success.svg","assets/warning.svg","assets/redbubbles.svg","components/organisms/Notify/index.tsx","App.tsx","mobx/useStores.ts","mobx/entities/queue/queue.ts","index.tsx","mobx/createStore.ts"],"names":["environment","holderFunction","console","log","altVConfig","on","EventName","AFunction","alt","off","emit","Parameters","Header","title","useEffect","WebFont","google","families","StyledHeader","styled","h1","Message","message","StyledMessage","p","NotifyHolder","width","StyledNotifyHolder","div","Icons","Icon","iconType","className","StyledIconHolder","src","Notify","color","MainWrapper","StyledIcon","StyledSVG","RedBubbles","StyledBackground","ReactSVG","App","observer","store","React","useContext","MobXProviderContext","timeoutNotification","notification","a","pushActive","setTimeout","removeActive","id","queue","length","active","JSON","parse","getShiftedQueue","duration","showNotifications","pushQueue","window","onClick","map","Queue","types","model","number","string","optional","array","actions","self","data","push","filter","e","pushItem","shift","stringify","create","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72fa9889.chunk.js","sourcesContent":["export const environment = {\r\n  /*\r\n   *   surface will handle the function: on() & emit()\r\n   *   if sufrace has the value \"AltV\" it will set the functions to altV events\r\n   *   if surface has the value \"Web\" it will set the functions to normal JS/TS functions\r\n   *   this handled like that because of not letting the console cry about \"alt.on & alt.emit are not functions\"\r\n   */\r\n  surface: 'AltV', // surface will handle the functions on() & emit() if they should be an altV event or a normal function\r\n};\r\n","import { environment } from '../constants/environment';\r\n\r\nconst on = (EventName: string, AFunction: any) => {\r\n  environment.surface === 'AltV'\r\n    ? // @ts-ignore\r\n      alt.on(EventName, AFunction) //eslint-disable-line no-undef\r\n    : holderFunction();\r\n};\r\n\r\nconst off = (EventName: string, AFunction: any) => {\r\n  environment.surface === 'AltV'\r\n    ? // @ts-ignore\r\n      alt.off(EventName, AFunction) //eslint-disable-line no-undef\r\n    : holderFunction();\r\n};\r\n\r\nconst emit = (EventName: string, ...Parameters: any[]) => {\r\n  environment.surface === 'AltV'\r\n    ? // @ts-ignore\r\n      alt.emit(EventName, ...Parameters) //eslint-disable-line no-undef\r\n    : holderFunction();\r\n};\r\n\r\nconst holderFunction = () => {\r\n  console.log(environment.surface);\r\n};\r\n\r\nconst altVConfig = {\r\n  on,\r\n  off,\r\n  emit,\r\n};\r\n\r\nexport default altVConfig;\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport * as WebFont from 'webfontloader';\r\n\r\ninterface HeaderProps {\r\n  title: string;\r\n}\r\n\r\nconst Header = ({ title }: HeaderProps) => {\r\n  useEffect(() => {\r\n    WebFont.load({\r\n      google: {\r\n        families: ['Poppins'],\r\n      },\r\n    });\r\n  }, []);\r\n  return <StyledHeader>{title}</StyledHeader>;\r\n};\r\n\r\nexport default Header;\r\n\r\nconst StyledHeader = styled.h1`\r\n  font-family: poppins, serif;\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 34px;\r\n  line-height: 51px;\r\n  letter-spacing: -0.035em;\r\n  color: #fff;\r\n  margin: 0 !important;\r\n`;\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport * as WebFont from 'webfontloader';\r\n\r\ninterface MessageProps {\r\n  message: string;\r\n}\r\n\r\nconst Message = ({ message }: MessageProps) => {\r\n  useEffect(() => {\r\n    WebFont.load({\r\n      google: {\r\n        families: ['Poppins'],\r\n      },\r\n    });\r\n  }, []);\r\n  return <StyledMessage>{message}</StyledMessage>;\r\n};\r\n\r\nexport default Message;\r\n\r\nconst StyledMessage = styled.p`\r\n  font-family: poppins, serif;\r\n  font-style: normal;\r\n  font-size: 14px;\r\n  letter-spacing: -0.035em;\r\n  margin-top: 0;\r\n  color: #fff;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../../atoms/Header';\r\nimport Message from '../../atoms/Message';\r\n\r\ninterface NotifyHolderProps {\r\n  title: string;\r\n  message: string;\r\n  width: number;\r\n}\r\n\r\nconst NotifyHolder = ({ title, message, width }: NotifyHolderProps) => {\r\n  return (\r\n    <StyledNotifyHolder width={width}>\r\n      <Header title={title} />\r\n      <Message message={message} />\r\n    </StyledNotifyHolder>\r\n  );\r\n};\r\n\r\nexport default NotifyHolder;\r\n\r\nconst StyledNotifyHolder = styled.div<{ width: number }>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  width: ${({ width }) => width}px;\r\n  margin-top: 1vh;\r\n  margin-bottom: 1vh;\r\n`;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport styled from 'styled-components';\r\nimport { ReactSVG } from 'react-svg';\r\n\r\n// Icon imports\r\nimport Fail from '../../../assets/fail.svg';\r\nimport Success from '../../../assets/success.svg';\r\nimport Warning from '../../../assets/warning.svg';\r\n\r\ninterface IconProps {\r\n  iconType: number;\r\n  className?: any;\r\n}\r\n\r\nconst Icons = [Fail, Success, Warning];\r\n\r\nconst Icon = ({ iconType, className }: IconProps) => {\r\n  return (\r\n    <StyledIconHolder className={className}>\r\n      <ReactSVG src={Icons[iconType]} />\r\n    </StyledIconHolder>\r\n  );\r\n};\r\n\r\nexport default Icon;\r\n\r\nconst StyledIconHolder = styled.div`\r\n  width: 8vh;\r\n  height: 8vh;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/fail.267f983e.svg\";","export default __webpack_public_path__ + \"static/media/success.0850cae9.svg\";","export default __webpack_public_path__ + \"static/media/warning.9f9ed956.svg\";","export default __webpack_public_path__ + \"static/media/redbubbles.8dd0ff11.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport NotifyHolder from '../../moleculs/NotifyHolder';\r\nimport Icons from '../../atoms/Icons';\r\nimport { ReactSVG } from 'react-svg';\r\n\r\nimport RedBubbles from '../../../assets/redbubbles.svg';\r\n\r\ninterface NotifyProps {\r\n  iconType: number;\r\n  title: string;\r\n  message: string;\r\n  color: string;\r\n  width: number;\r\n}\r\n\r\nconst Notify = ({ iconType, title, message, color, width }: NotifyProps) => {\r\n  return (\r\n    <MainWrapper>\r\n      <StyledIcon iconType={iconType} />\r\n      <StyledSVG src={RedBubbles} />\r\n      <StyledBackground color={color}>\r\n        <NotifyHolder\r\n          title={title}\r\n          message={message}\r\n          width={width}\r\n        ></NotifyHolder>\r\n      </StyledBackground>\r\n    </MainWrapper>\r\n  );\r\n};\r\n\r\nexport default Notify;\r\n\r\nconst MainWrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: flex-end;\r\n  border-radius: 32px;\r\n  height: 174px;\r\n  width: 438px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst StyledBackground = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: #${({ color }) => color};\r\n  border-radius: 32px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledIcon = styled(Icons)`\r\n  z-index: 15;\r\n  position: absolute;\r\n  top: 30px;\r\n  left: 23px;\r\n`;\r\n\r\nconst StyledSVG = styled(ReactSVG)`\r\n  z-index: 15;\r\n  position: absolute;\r\n  bottom: -10px;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\nimport * as WebFont from 'webfontloader';\nimport altVConfig from './utils/altconfig';\nimport { observer } from 'mobx-react';\nimport { useStore } from './mobx/useStores';\nimport './App.css';\n\nimport Notify from './components/organisms/Notify';\nimport { environment } from './constants/environment';\n\nconst App = observer(() => {\n  const store = useStore();\n\n  const handleClick = () => {\n    let notification = {\n      iconType: 0,\n      title: 'notification.title',\n      message: 'notification.message',\n      color: '03A65A',\n      width: 244,\n      duration: 3000,\n    };\n\n    showNotifications(notification);\n  };\n\n  const timeoutNotification = async (notification: any) => {\n    store.pushActive(notification);\n    setTimeout(() => {\n      store.removeActive(notification.id);\n      if (store.queue.length > 0 && store.active.length < 4) {\n        timeoutNotification(JSON.parse(store.getShiftedQueue()));\n      }\n    }, notification.duration);\n  };\n\n  const showNotifications = async (notification: any) => {\n    notification = {\n      id: notification.id,\n      iconType: notification.iconType,\n      title: notification.title,\n      message: notification.message,\n      color: notification.color,\n      width: notification.width,\n      duration: 3000,\n    };\n\n    if (store.active.length > 3) {\n      store.pushQueue(notification);\n    } else {\n      timeoutNotification(notification);\n    }\n  };\n\n  useEffect(() => {\n    //Load the fonts\n    WebFont.load({\n      google: {\n        families: ['Poppins'],\n      },\n    });\n\n    if (!('alt' in window)) return;\n    altVConfig.on('notify:ShowNotification', showNotifications);\n\n    return () => {\n      return altVConfig.off('notify:ShowNotification', showNotifications);\n    };\n  }, []);\n\n  return (\n    <div className='App'>\n      {environment.surface !== 'AltV' ? (\n        <button onClick={handleClick}>klick mich</button>\n      ) : null}\n      {store.active.map((notification: any) => {\n        return (\n          <Notify\n            key={notification.id}\n            iconType={notification.iconType}\n            title={notification.title}\n            message={notification.message}\n            color={notification.color}\n            width={notification.width}\n          />\n        );\n      })}\n    </div>\n  );\n});\n\nexport default App;\n","import React from 'react';\r\nimport { MobXProviderContext } from 'mobx-react';\r\n\r\nexport function useStore() {\r\n  return React.useContext(MobXProviderContext).store;\r\n}\r\n","import { types } from 'mobx-state-tree';\r\n\r\nexport const Queue = types.model('Queue', {\r\n  id: types.number,\r\n  iconType: types.number,\r\n  title: types.string,\r\n  message: types.string,\r\n  color: types.string,\r\n  width: types.number,\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport './index.css';\nimport App from './App';\nimport { createStore } from './mobx/createStore';\n\nconst store = createStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { types } from 'mobx-state-tree';\r\n\r\nimport { Active } from './entities/active/active';\r\nimport { Queue } from './entities/queue/queue';\r\n\r\nexport function createStore() {\r\n  const Store = types\r\n    .model('Store', {\r\n      active: types.optional(types.array(Queue), []),\r\n      queue: types.optional(types.array(Queue), []),\r\n    })\r\n    .actions((self) => ({\r\n      pushActive(data: any) {\r\n        self.active.push(data);\r\n      },\r\n      pushQueue(data: any) {\r\n        self.queue.push(data);\r\n      },\r\n      removeActive(id: number) {\r\n        //@ts-ignore\r\n        self.active = self.active.filter((e: any) => e.id !== id);\r\n      },\r\n      getShiftedQueue() {\r\n        let pushItem = self.queue.shift();\r\n        return JSON.stringify(pushItem);\r\n      },\r\n    }));\r\n\r\n  const store = Store.create({\r\n    active: [],\r\n    queue: [],\r\n  });\r\n\r\n  return store;\r\n}\r\n"],"sourceRoot":""}